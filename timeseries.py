# -*- coding: utf-8 -*-
"""TimeSeries

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q3T8piFGNrxlMi_WvtjIYn_WzLFN82Gr
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
# Ignore harmless warnings
import warnings
warnings.filterwarnings("ignore")
from IPython.display import HTML,display

warnings.filterwarnings("ignore")

# for dirname, _, filenames in os.walk('/kaggle/input'):
#     for filename in filenames:
#         print(os.path.join(dirname, filename))

#Reading the dataset into object 'df' using pandas:
df= pd.read_csv('/content/city_day.csv',parse_dates=True)
df['Date'] = pd.to_datetime(df['Date'])

df.head(5)

df.describe()

df=df[['City','Date','AQI','AQI_Bucket']]

cities=pd.unique(df['City'])
column1= cities+'_AQI'
column2=cities+'_AQI_Bucket'
columns=[*column1,*column2]

final_df=pd.DataFrame(index=np.arange('2015-01-01','2020-05-02',dtype='datetime64[D]'),columns=column1)
for city,i in zip(cities,final_df.columns):
    n=len(np.array(df[df['City']==city]['AQI']))
    final_df[i][-n:]=np.array(df[df['City']==city]['AQI'])

# Daily data to average monthly data
final_df=final_df.astype('float64')
final_df=final_df.resample(rule='MS').mean()

final_df.tail()

final_df['India_AQI']=final_df.mean(axis=1)

ax=final_df[['India_AQI']].plot(figsize=(12,8),grid=True,lw=2,color='Red')
ax.autoscale(enable=True, axis='both', tight=True)

# in the past five years,pollution has reduced marginally
# Covid ke time pe pollution decreased significantly due to lockdown
# AQI vs Year, genral decrease in pollution

df_2019=final_df['2019-01-01':'2020-01-01']
df_2019.head()

df_2019.isna().sum() #Missing Values

df_2019=df_2019.drop(['Aizawl_AQI','Ernakulam_AQI','Kochi_AQI'],axis=1)

AQI_2019=df_2019.mean(axis=0)

plt.figure(figsize=(20,8))
plt.xticks(rotation=90)
bplot = sns.boxplot( data=df_2019,  width=0.75,palette="GnBu_d")
plt.ylabel('AQI');
bplot.grid(True)

# Highest AQI for AHembdabad

plt.figure(figsize=(20,8))
plt.xticks(rotation=90)
plt.ylabel('AQI')
bplot = sns.barplot(x=AQI_2019.index, y=AQI_2019.values, palette="GnBu_d")

# Ahmedabad and Delhi are the most polluted whereas Shillong is the least followed by trivandrum

#seasonal AQI values
from statsmodels.tsa.seasonal import seasonal_decompose
India_AQI=final_df['India_AQI']
result=seasonal_decompose(India_AQI,model='multiplicative')
result.plot();

from matplotlib import dates
ax=result.seasonal.plot(xlim=['2018-01-01','2020-02-10'],figsize=(20,8),lw=2)
ax.yaxis.grid(True)
ax.xaxis.grid(True)

# October and January High 
# Lowest amount of pollution  around july-September after which there is a sharp increase. 
# decrease from January to July. 
# This spike in the winters

# Load specific forecasting tools
from statsmodels.tsa.statespace.sarimax import SARIMAX
!pip install pmdarima;
from pmdarima import auto_arima;

# auto_arima(y=India_AQI,start_p=0,start_P=0,start_q=0,start_Q=0,seasonal=True, m=12).summary()

len(India_AQI)

#dividing into train and test:
train=India_AQI[:41]
test=India_AQI[42:54]

# Forming the model:
model=SARIMAX(train,order=(1,1,1),seasonal_order=(1,0,1,12),)
results=model.fit()
results.summary()

#Obtaining predicted values:
predictions = results.predict(start=42, end=53, typ='levels').rename('Predictions')

#Plotting predicted values against the true values:
predictions.plot(legend=True)
test.plot(legend=True);

from sklearn.metrics import mean_squared_error
RMSE=np.sqrt(mean_squared_error(predictions,test))
print('RMSE = ',RMSE)
print('Mean AQI',test.mean())

#dividing into train and test:
train=India_AQI[:53]
test=India_AQI[54:]
# Forming the model:
model=SARIMAX(train,order=(1,1,1),seasonal_order=(1,0,1,12),)
results=model.fit()
results.summary()
#Obtaining predicted values:
predictions = results.predict(start=54, end=64, typ='levels').rename('Predictions')
#Plotting predicted values against the true values:
predictions.plot(legend=True)
test.plot(legend=True);

#Finding RMSE:
from sklearn.metrics import mean_squared_error
RMSE=np.sqrt(mean_squared_error(predictions,test))
print('RMSE = ',RMSE)
print('Mean AQI',test.mean())

# Forming the model:
model=SARIMAX(India_AQI,order=(1,1,1),seasonal_order=(1,0,1,12))
results=model.fit()
results.summary()
#Obtaining predicted values:
predictions = results.predict(start=64, end=77, typ='levels').rename('Predictions')
#Plotting predicted values against the true values:
predictions.plot(legend=True)
India_AQI.plot(legend=True,figsize=(12,8),grid=True);

# pip install pystan

# pip install fbprophet

# !pip install fbprophet

# pip install pystan==2.19.1.1

pip install pystan==2.19.1.1

pip install fbprophet

from fbprophet import Prophet

#Formatting necessary to Prophet:
India_AQI=India_AQI.reset_index()
India_AQI.columns=['ds','y']

# Forming test/train data:
train=India_AQI[:-24]
test=India_AQI[-24:-12]
m = Prophet(seasonality_mode='multiplicative')
m.fit(train)

future = m.make_future_dataframe(periods=12,freq = 'MS')

forecast = m.predict(future)
m.plot(forecast);

#Finding RMSE:
from sklearn.metrics import mean_squared_error
RMSE=np.sqrt(mean_squared_error(forecast['yhat'][-12:],test['y']))
print('RMSE = ',RMSE)
print('Mean AQI',test['y'].mean())

m = Prophet(seasonality_mode='multiplicative',weekly_seasonality=False,daily_seasonality=False)
# m.fit(India_AQI)
# future = m.make_future_dataframe(periods=12,freq = 'MS')
# forecast = m.predict(future)
# m.plot(forecast);

# m.plot_components(forecast);

India_AQI=India_AQI.set_index('ds')

train=India_AQI[:-24]
test=India_AQI[-24:-12]

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
scaler.fit(train)

scaled_train = scaler.transform(train)
scaled_test = scaler.transform(test)

from keras.preprocessing.sequence import TimeseriesGenerator
n_input = 24
n_features = 1
generator = TimeseriesGenerator(scaled_train, scaled_train, length=n_input, batch_size=1)

#To give an idea of what generator file holds:
X,y = generator[0]

# We can see that the x array gives the list of values that we are going to predict y of:
print(f'Given the Array: \n{X.flatten()}')
print(f'Predict this y: \n {y}')

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM

# defining the model(note that  I am using a very basic model here, a 2 layer model only):
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(n_input, n_features)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

model.summary()

# Fitting the model with the generator object:
model.fit_generator(generator,epochs=250)

loss_per_epoch = model.history.history['loss']
plt.plot(range(len(loss_per_epoch)),loss_per_epoch)

test_predictions = []

first_eval_batch = scaled_train[-n_input:]
current_batch = first_eval_batch.reshape((1, n_input, n_features))

for i in range(len(test)):
    
    
    current_pred = model.predict(current_batch)[0]
    
    
    test_predictions.append(current_pred) 
    
    
    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)

true_predictions = scaler.inverse_transform(test_predictions)

test['Predictions'] = true_predictions

test.plot(figsize=(12,8))
plt.plot(true_predictions)

RMSE=np.sqrt(mean_squared_error(test['y'],test['Predictions']))
print('RMSE = ',RMSE)
print('India_AQI=',India_AQI['y'].mean())

true_predictions = scaler.inverse_transform(test_predictions)

test['Predictions'] = true_predictions

scaler.fit(India_AQI)
scaled_India_AQI=scaler.transform(India_AQI)

generator = TimeseriesGenerator(scaled_India_AQI, scaled_India_AQI, length=n_input, batch_size=1)

model.fit_generator(generator,epochs=250)

test_predictions = []

first_eval_batch = scaled_India_AQI[-n_input:]
current_batch = first_eval_batch.reshape((1, n_input, n_features))

for i in range(len(test)):
    
    
    current_pred = model.predict(current_batch)[0]
    
    
    test_predictions.append(current_pred) 
    
    
    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)

true_predictions = scaler.inverse_transform(test_predictions)

true_predictions=true_predictions.flatten()

true_preds=pd.DataFrame(true_predictions,columns=['Forecast'])
true_preds=true_preds.set_index(pd.date_range('2020-06-01',periods=12,freq='MS'))

true_preds

plt.figure(figsize=(20,8))
plt.grid(True)
plt.plot( true_preds['Forecast'])
plt.plot( India_AQI['y'])

